#!/usr/bin/env node

"use strict";

process.title = 'serve-pie';

const argv = require('minimist')(process.argv);

const logFactory = require('../lib/log-factory');
const fs = require('fs-extra');

if (argv.log) {
  if (logFactory.isLogLevel(argv.log)) {
    logFactory.setDefaultLevel(argv.log);
  } else {
    try{
      let config = JSON.parse(argv.log);
      logFactory.setConfig(config);
    } catch(e) {
      if(fs.existsSync(argv.log)){
        logFactory.setConfigFromFile(argv.log);
      } else {
        console.error('file ' + argv.log + ' does not exist');
      }
    }
  }
}

const PieContainer = require('../lib/serve-pie');
const path = require('path');
const _ = require('lodash');
const parentDir = path.normalize(path.join(process.cwd(), '..'));
const userHome = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
const logger = logFactory.fileLogger(__filename);

if (argv.h || argv.help) {

  console.log(`serve-pie:  serve up some pie. 
Options:
  -p | --port [port] - the http port to bind to (default: 5000)
  --root [path]      - the path to the samples (default: ${process.cwd()})
  --pie <pie_folder> - the path to the pie_folder to preview (default: ${parentDir})
    - you can add '--pie' as many times as you want.
  --log              - either a log level, a path to a log config file or a json string
    - if a log level it'll apply globally
    - if a path to a log file you can configure individual levels for different loggers
    - if a json string it'll be parsed and set
  --log-requests     - log requests to the server endpoints
  --fullInstall      - run a full install (with bower and resolution reports) (default: true)
  --event-handler    - a path to a external js module that exposes a constructor that creates an instance with a 'handle' method
`);
  process.exit(0);
} else {

  let logRequests = argv['log-requests'];
  let container = new PieContainer();
  let cliPies = (() => {
    let arr = _.isArray(argv.pie) ? argv.pie : [argv.pie];
    return _(arr).compact().reduce((acc, p) => {
      try {
        let resolved = path.resolve(p);
        let stat = require('fs-extra').lstatSync(resolved);
        console.log('resolved: ', resolved);
        if(stat.isDirectory()){
          let name = path.basename(resolved);
          acc[name] = resolved;
        }
      } catch (e) {
        logger.error(`Can't find path: ${p}`);
        logger.debug(e.stack);
      }
      return acc;
    }, {});
  })();

  let root = argv.root || process.cwd();
  let itemPies = require('../lib/read-item-dependencies')(root);
  logger.silly('itemPies', itemPies);
  logger.silly('cliPies', cliPies);
  let joinedPies = _.extend({}, itemPies, cliPies);
  let resolutions = (fs.readJsonSync(root + '/dependencies.json', {throws: false}) || {}).resolutions;
  logger.silly(`resolutions: ${JSON.stringify(resolutions)}`);
  logger.debug('joinedPies: ', joinedPies);
  container.run({
    pies: joinedPies,
    resolutions: resolutions,
    fullInstall: argv.fullInstall,
    port: argv.p || argv.port || 5000,
    root: root,
    logRequests: logRequests, 
    eventHandlerPath: argv['event-handler'] 
  });
}


