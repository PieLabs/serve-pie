#!/usr/bin/env node

"use strict";

process.title = 'serve-pie';

const argv = require('minimist')(process.argv);

const logFactory = require('../lib/log-factory');

if (argv.log) {
  if (logFactory.isLogLevel(argv.log)) {
    logFactory.setDefaultLevel(argv.log);
  } else {
    logFactory.setConfigFromFile(argv.log);
  }
}

const PieContainer = require('../lib/serve-pie');
const path = require('path');
const _ = require('lodash');
const parentDir = path.normalize(path.join(process.cwd(), '..'));
const userHome = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];

if (argv.h || argv.help) {

  console.log(`serve-pie:  serve up some pie. 
Options:
  -p | --port [port] - the http port to bind to (default: 5000)
  --root [path]      - the path to the samples (default: ${process.cwd()})
  --pie <pie_folder> - the path to the pie_folder to preview (default: ${parentDir})
    - you can add '--pie' as many times as you want.
  --log              - either a log level or a path to a log config file
    - if a log level it'll apply globally
    - if a path to a log file you can configure individual levels for different loggers
  --fullInstall      - run a full install (with bower and resolution reports) (default: true)
`);
  process.exit(0);
} else {
  
  let container = new PieContainer();
  let cliPies = (() => {
     let arr = _.isArray(argv.pie) ? argv.pie : [argv.pie];
     
     return _(arr).compact().reduce((acc, p) => {
       let name = path.basename(p);
       acc[name] = p;
       return acc;
     }, {});
  })();

  let root = argv.root || process.cwd();
  let itemPies = require('../lib/read-item-dependencies')(root);
  
  container.run({
    pies: _.extend(cliPies, itemPies, {}),
    fullInstall: argv.fullInstall,
    port: argv.p || argv.port || 5000,
    root: root
  });
}


